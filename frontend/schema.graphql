type Arc {
  arc_id: String
  chapters(filters: ChapterFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ChapterRelationResponseCollection
  createdAt: DateTime
  description: String
  publishedAt: DateTime
  title: String!
  updatedAt: DateTime
}

type ArcEntity {
  attributes: Arc
  id: ID
}

type ArcEntityResponse {
  data: ArcEntity
}

type ArcEntityResponseCollection {
  data: [ArcEntity!]!
  meta: ResponseCollectionMeta!
}

input ArcFiltersInput {
  and: [ArcFiltersInput]
  arc_id: StringFilterInput
  chapters: ChapterFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  not: ArcFiltersInput
  or: [ArcFiltersInput]
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ArcInput {
  arc_id: String
  chapters: [ID]
  description: String
  publishedAt: DateTime
  title: String
}

type Artifact {
  createdAt: DateTime
  description: String
  model_file: UploadFileEntityResponse
  publishedAt: DateTime
  title: String
  updatedAt: DateTime
}

type ArtifactEntity {
  attributes: Artifact
  id: ID
}

type ArtifactEntityResponse {
  data: ArtifactEntity
}

type ArtifactEntityResponseCollection {
  data: [ArtifactEntity!]!
  meta: ResponseCollectionMeta!
}

input ArtifactFiltersInput {
  and: [ArtifactFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  not: ArtifactFiltersInput
  or: [ArtifactFiltersInput]
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ArtifactInput {
  description: String
  model_file: ID
  publishedAt: DateTime
  title: String
}

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type Chapter {
  arc: ArcEntityResponse
  blurb: String
  chapter_header_media(filters: ComponentMultimediaHeaderMediaFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentMultimediaHeaderMedia]
  content: String
  createdAt: DateTime
  emblem: UploadFileEntityResponse
  interactive_blocks(filters: InteractiveBlockFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): InteractiveBlockRelationResponseCollection
  publishedAt: DateTime
  seo_information: ComponentSeoSeoInformation
  slug: String
  title: String!
  updatedAt: DateTime
}

type ChapterEntity {
  attributes: Chapter
  id: ID
}

type ChapterEntityResponse {
  data: ChapterEntity
}

type ChapterEntityResponseCollection {
  data: [ChapterEntity!]!
  meta: ResponseCollectionMeta!
}

input ChapterFiltersInput {
  and: [ChapterFiltersInput]
  arc: ArcFiltersInput
  blurb: StringFilterInput
  chapter_header_media: ComponentMultimediaHeaderMediaFiltersInput
  content: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  interactive_blocks: InteractiveBlockFiltersInput
  not: ChapterFiltersInput
  or: [ChapterFiltersInput]
  publishedAt: DateTimeFilterInput
  seo_information: ComponentSeoSeoInformationFiltersInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ChapterInput {
  arc: ID
  blurb: String
  chapter_header_media: [ComponentMultimediaHeaderMediaInput]
  content: String
  emblem: ID
  interactive_blocks: [ID]
  publishedAt: DateTime
  seo_information: ComponentSeoSeoInformationInput
  slug: String
  title: String
}

type ChapterRelationResponseCollection {
  data: [ChapterEntity!]!
}

type Character {
  biography: String
  character_id: String
  character_quote: String
  createdAt: DateTime
  faction: ENUM_CHARACTER_FACTION!
  laconic_description: String
  music_album: MusicAlbumEntityResponse
  name: String!
  profile_images(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  publishedAt: DateTime
  updatedAt: DateTime
}

type CharacterEntity {
  attributes: Character
  id: ID
}

type CharacterEntityResponse {
  data: CharacterEntity
}

type CharacterEntityResponseCollection {
  data: [CharacterEntity!]!
  meta: ResponseCollectionMeta!
}

input CharacterFiltersInput {
  and: [CharacterFiltersInput]
  biography: StringFilterInput
  character_id: StringFilterInput
  character_quote: StringFilterInput
  createdAt: DateTimeFilterInput
  faction: StringFilterInput
  id: IDFilterInput
  laconic_description: StringFilterInput
  music_album: MusicAlbumFiltersInput
  name: StringFilterInput
  not: CharacterFiltersInput
  or: [CharacterFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input CharacterInput {
  biography: String
  character_id: String
  character_quote: String
  faction: ENUM_CHARACTER_FACTION
  laconic_description: String
  music_album: ID
  name: String
  profile_images: [ID]
  publishedAt: DateTime
}

type CharacterRelationResponseCollection {
  data: [CharacterEntity!]!
}

type ComponentMultimediaHeaderMedia {
  hero_carousel(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  hero_image: UploadFileEntityResponse
  hero_video: UploadFileEntityResponse
  id: ID!
}

input ComponentMultimediaHeaderMediaFiltersInput {
  and: [ComponentMultimediaHeaderMediaFiltersInput]
  not: ComponentMultimediaHeaderMediaFiltersInput
  or: [ComponentMultimediaHeaderMediaFiltersInput]
}

input ComponentMultimediaHeaderMediaInput {
  hero_carousel: [ID]
  hero_image: ID
  hero_video: ID
  id: ID
}

type ComponentSeoSeoInformation {
  id: ID!
  language_code: String
  meta_description: String
  og_image: UploadFileEntityResponse
  og_site_name: String
  page_title: String
}

input ComponentSeoSeoInformationFiltersInput {
  and: [ComponentSeoSeoInformationFiltersInput]
  language_code: StringFilterInput
  meta_description: StringFilterInput
  not: ComponentSeoSeoInformationFiltersInput
  og_site_name: StringFilterInput
  or: [ComponentSeoSeoInformationFiltersInput]
  page_title: StringFilterInput
}

input ComponentSeoSeoInformationInput {
  id: ID
  language_code: String
  meta_description: String
  og_image: ID
  og_site_name: String
  page_title: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

enum ENUM_CHARACTER_FACTION {
  essence
  first_darkness
  golden_palanquin
  kingdom
  old_gods
  second_darkness
  third_darkness
}

enum ENUM_INTERACTIVEBLOCK_TYPE {
  interactive_split_screen
  interactive_with_image
  interactive_with_video
}

enum ENUM_MUSICALBUM_TYPE {
  extended_play
  long_play
  single
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

union GenericMorph = Arc | Artifact | Chapter | Character | ComponentMultimediaHeaderMedia | ComponentSeoSeoInformation | I18NLocale | InteractiveBlock | Location | MusicAlbum | Soundtrack | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

type InteractiveBlock {
  chapters(filters: ChapterFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ChapterRelationResponseCollection
  createdAt: DateTime
  images(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  interactive_block_id: String!
  publishedAt: DateTime
  rich_text_caption: String
  sounds(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  soundtracks(filters: SoundtrackFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): SoundtrackRelationResponseCollection
  title: String!
  type: ENUM_INTERACTIVEBLOCK_TYPE
  updatedAt: DateTime
}

type InteractiveBlockEntity {
  attributes: InteractiveBlock
  id: ID
}

type InteractiveBlockEntityResponse {
  data: InteractiveBlockEntity
}

type InteractiveBlockEntityResponseCollection {
  data: [InteractiveBlockEntity!]!
  meta: ResponseCollectionMeta!
}

input InteractiveBlockFiltersInput {
  and: [InteractiveBlockFiltersInput]
  chapters: ChapterFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  interactive_block_id: StringFilterInput
  not: InteractiveBlockFiltersInput
  or: [InteractiveBlockFiltersInput]
  publishedAt: DateTimeFilterInput
  rich_text_caption: StringFilterInput
  soundtracks: SoundtrackFiltersInput
  title: StringFilterInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input InteractiveBlockInput {
  chapters: [ID]
  images: [ID]
  interactive_block_id: String
  publishedAt: DateTime
  rich_text_caption: String
  sounds: [ID]
  soundtracks: [ID]
  title: String
  type: ENUM_INTERACTIVEBLOCK_TYPE
}

type InteractiveBlockRelationResponseCollection {
  data: [InteractiveBlockEntity!]!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

type Location {
  createdAt: DateTime
  geography: String
  history: String
  laconic_description: String
  location_header_media: ComponentMultimediaHeaderMedia
  location_id: String
  music_album: MusicAlbumEntityResponse
  name: String
  present_in_main_story: Boolean
  publishedAt: DateTime
  updatedAt: DateTime
}

type LocationEntity {
  attributes: Location
  id: ID
}

type LocationEntityResponse {
  data: LocationEntity
}

type LocationEntityResponseCollection {
  data: [LocationEntity!]!
  meta: ResponseCollectionMeta!
}

input LocationFiltersInput {
  and: [LocationFiltersInput]
  createdAt: DateTimeFilterInput
  geography: StringFilterInput
  history: StringFilterInput
  id: IDFilterInput
  laconic_description: StringFilterInput
  location_header_media: ComponentMultimediaHeaderMediaFiltersInput
  location_id: StringFilterInput
  music_album: MusicAlbumFiltersInput
  name: StringFilterInput
  not: LocationFiltersInput
  or: [LocationFiltersInput]
  present_in_main_story: BooleanFilterInput
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input LocationInput {
  geography: String
  history: String
  laconic_description: String
  location_header_media: ComponentMultimediaHeaderMediaInput
  location_id: String
  music_album: ID
  name: String
  present_in_main_story: Boolean
  publishedAt: DateTime
}

type LocationRelationResponseCollection {
  data: [LocationEntity!]!
}

type MusicAlbum {
  blurb: String
  characters(filters: CharacterFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CharacterRelationResponseCollection
  cover_image: UploadFileEntityResponse
  createdAt: DateTime
  locations(filters: LocationFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): LocationRelationResponseCollection
  music_album_id: String
  name: String!
  publishedAt: DateTime
  release_date: Date
  soundtracks(filters: SoundtrackFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): SoundtrackRelationResponseCollection
  type: ENUM_MUSICALBUM_TYPE
  updatedAt: DateTime
}

type MusicAlbumEntity {
  attributes: MusicAlbum
  id: ID
}

type MusicAlbumEntityResponse {
  data: MusicAlbumEntity
}

type MusicAlbumEntityResponseCollection {
  data: [MusicAlbumEntity!]!
  meta: ResponseCollectionMeta!
}

input MusicAlbumFiltersInput {
  and: [MusicAlbumFiltersInput]
  blurb: StringFilterInput
  characters: CharacterFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locations: LocationFiltersInput
  music_album_id: StringFilterInput
  name: StringFilterInput
  not: MusicAlbumFiltersInput
  or: [MusicAlbumFiltersInput]
  publishedAt: DateTimeFilterInput
  release_date: DateFilterInput
  soundtracks: SoundtrackFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input MusicAlbumInput {
  blurb: String
  characters: [ID]
  cover_image: ID
  locations: [ID]
  music_album_id: String
  name: String
  publishedAt: DateTime
  release_date: Date
  soundtracks: [ID]
  type: ENUM_MUSICALBUM_TYPE
}

type Mutation {
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createArc(data: ArcInput!): ArcEntityResponse
  createArtifact(data: ArtifactInput!): ArtifactEntityResponse
  createChapter(data: ChapterInput!): ChapterEntityResponse
  createCharacter(data: CharacterInput!): CharacterEntityResponse
  createInteractiveBlock(data: InteractiveBlockInput!): InteractiveBlockEntityResponse
  createLocation(data: LocationInput!): LocationEntityResponse
  createMusicAlbum(data: MusicAlbumInput!): MusicAlbumEntityResponse
  createSoundtrack(data: SoundtrackInput!): SoundtrackEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteArc(id: ID!): ArcEntityResponse
  deleteArtifact(id: ID!): ArtifactEntityResponse
  deleteChapter(id: ID!): ChapterEntityResponse
  deleteCharacter(id: ID!): CharacterEntityResponse
  deleteInteractiveBlock(id: ID!): InteractiveBlockEntityResponse
  deleteLocation(id: ID!): LocationEntityResponse
  deleteMusicAlbum(id: ID!): MusicAlbumEntityResponse
  deleteSoundtrack(id: ID!): SoundtrackEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateArc(data: ArcInput!, id: ID!): ArcEntityResponse
  updateArtifact(data: ArtifactInput!, id: ID!): ArtifactEntityResponse
  updateChapter(data: ChapterInput!, id: ID!): ChapterEntityResponse
  updateCharacter(data: CharacterInput!, id: ID!): CharacterEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateInteractiveBlock(data: InteractiveBlockInput!, id: ID!): InteractiveBlockEntityResponse
  updateLocation(data: LocationInput!, id: ID!): LocationEntityResponse
  updateMusicAlbum(data: MusicAlbumInput!, id: ID!): MusicAlbumEntityResponse
  updateSoundtrack(data: SoundtrackInput!, id: ID!): SoundtrackEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  arc(id: ID): ArcEntityResponse
  arcs(filters: ArcFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArcEntityResponseCollection
  artifact(id: ID): ArtifactEntityResponse
  artifacts(filters: ArtifactFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArtifactEntityResponseCollection
  chapter(id: ID): ChapterEntityResponse
  chapters(filters: ChapterFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ChapterEntityResponseCollection
  character(id: ID): CharacterEntityResponse
  characters(filters: CharacterFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CharacterEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  interactiveBlock(id: ID): InteractiveBlockEntityResponse
  interactiveBlocks(filters: InteractiveBlockFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): InteractiveBlockEntityResponseCollection
  location(id: ID): LocationEntityResponse
  locations(filters: LocationFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): LocationEntityResponseCollection
  me: UsersPermissionsMe
  musicAlbum(id: ID): MusicAlbumEntityResponse
  musicAlbums(filters: MusicAlbumFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): MusicAlbumEntityResponseCollection
  soundtrack(id: ID): SoundtrackEntityResponse
  soundtracks(filters: SoundtrackFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): SoundtrackEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

type Soundtrack {
  createdAt: DateTime
  description: String
  interactive_blocks(filters: InteractiveBlockFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): InteractiveBlockRelationResponseCollection
  publishedAt: DateTime
  soundtrack_id: String
  title: String
  track_file: UploadFileEntityResponse
  updatedAt: DateTime
}

type SoundtrackEntity {
  attributes: Soundtrack
  id: ID
}

type SoundtrackEntityResponse {
  data: SoundtrackEntity
}

type SoundtrackEntityResponseCollection {
  data: [SoundtrackEntity!]!
  meta: ResponseCollectionMeta!
}

input SoundtrackFiltersInput {
  and: [SoundtrackFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  interactive_blocks: InteractiveBlockFiltersInput
  not: SoundtrackFiltersInput
  or: [SoundtrackFiltersInput]
  publishedAt: DateTimeFilterInput
  soundtrack_id: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input SoundtrackInput {
  description: String
  interactive_blocks: [ID]
  publishedAt: DateTime
  soundtrack_id: String
  title: String
  track_file: ID
}

type SoundtrackRelationResponseCollection {
  data: [SoundtrackEntity!]!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}
